fibo
#include<stdio.h>
int main()
{
int i,n;
int term1=0,term2=1;
int nextTerm= term1=term2;
printf("num of terms is:");
scanf("%d",&n);
printf("the fibonacci series is : %d, %d,",term1,term2);
for(i=3; i <=n;++i)
{
printf("%d," , nextTerm);
{
term1 =term2;
term2=nextTerm;
nextTerm = term1 + term2;
}
return 0;
}
}   
----------------------------------------------------------

Armstrong
#include<stdio.h>
int main()
{
int n,r,sum=0,temp;
printf("enter the number=");
scanf("%d",&n);
temp=n;
while(n>0)
{
r=n%10;
sum=sum+(r*r*r);
n=n/10;
}
if(temp==sum)
printf("armstrong number");
else
printf("not armstrong  number");
return 0;
}
------------------------------------------------------------
Gcd
#include <stdio.h>
int main()
{
	int n1,n2;
	printf("enter two positive integers:");
	scanf("%d%d",&n1,&n2);
	while(n1!=n2)
	{
		if(n1>n2)
		n1-=n2;
		else
		n2-=n1;
	}
	printf("gcd=%d",n1);
	return 0;
}
------------------------------------------------------
largestnum
#include <stdio.h>    
     
int main()    
{      
    int arr[] = {25, 11, 7, 75, 56};         
    int length = sizeof(arr)/sizeof(arr[0]);        
    int max = arr[0];        
    for (int i = 0; i < length; i++) 
	{      
       if(arr[i] > max)    
           max = arr[i];    
    }      
    printf("Largest element present in given array: %d\n", max);    
    return 0;    
}    
----------------------------------------------------------------
factnum
#include<stdio.h>  
int main()    
{    
 int i,fact=1,number;    
 printf("Enter a number: ");    
  scanf("%d",&number);    
    for(i=1;i<=number;i++){    
      fact=fact*i;    
  }    
  printf("Factorial of %d is: %d",number,fact);    
return 0;  
}   
------------------------------------------------------------
primenum
#include<stdio.h>  
int main(){    
int n,i,m=0,flag=0;    
printf("Enter the number to check prime:");    
scanf("%d",&n);    
m=n/2;    
for(i=2;i<=m;i++)    
{    
if(n%i==0)    
{    
printf("Number is not prime");    
flag=1;    
break;    
}    
}    
if(flag==0)    
printf("Number is prime");     
return 0;  
}
 ----------------------------------------------------------
selectionsort
#include <stdio.h>
int main()
{
int a[100], n, i, j, position, swap;
printf("Enter number of elementsn");
scanf("%d", &n);
printf("Enter %d Numbersn", n);
for (i = 0; i < n; i++)
scanf("%d", &a[i]);
for(i = 0; i < n - 1; i++)
{
position=i;
for(j = i + 1; j < n; j++)
{
if(a[position] > a[j])
position=j;
}
if(position != i)
{
swap=a[i];
a[i]=a[position];
a[position=swap;
}
}
printf("Sorted Array:n");
for(i = 0; i < n; i++)
printf("%dn", a[i]);
return 0;
}
-------------------------------------------------------------
Matrixmul
#include<stdio.h>    
#include<stdlib.h>  
int main(){  
int a[10][10],b[10][10],mul[10][10],r,c,i,j,k;    
system("cls");  
printf("enter the number of row=");    
scanf("%d",&r);    
printf("enter the number of column=");    
scanf("%d",&c);    
printf("enter the first matrix element=\n");    
for(i=0;i<r;i++)    
{    
for(j=0;j<c;j++)    
{    
scanf("%d",&a[i][j]);    
}    
}    
printf("enter the second matrix element=\n");    
for(i=0;i<r;i++)    
{    
for(j=0;j<c;j++)    
{    
scanf("%d",&b[i][j]);    
}    
}    
    
printf("multiply of the matrix=\n");    
for(i=0;i<r;i++)    
{    
for(j=0;j<c;j++)    
{    
mul[i][j]=0;    
for(k=0;k<c;k++)    
{    
mul[i][j]+=a[i][k]*b[k][j];    
}    
}    
}    
//for printing result    
for(i=0;i<r;i++)    
{    
for(j=0;j<c;j++)    
{    
printf("%d\t",mul[i][j]);    
}    
printf("\n");    
}    
return 0;  
}  
-----------------------------------------------------------
palindrome
#include<stdio.h>
#include<conio.h>
#include<string.h>
int main() {
    char str[20];
    int i, len, temp=0;
    int flag = 0;
    printf("Enter a string:");
    scanf("%s", str);
    len = strlen(str);
    for(i=0; i < len ; i++) {
        if(str[i] != str[len-i-1]) {
            temp = 1;
            break;
        }
    }
    if (temp==0) {
        printf("String is a palindrome");
    }
    else {
        printf("String is not a palindrome");
    }
    return 0;
}
-----------------------------------------------------------
Bubblesort
#include <stdio.h>
int main()
{
    int arr[50], num, x, y, temp;    
    printf("Please Enter the Number of Elements you want in the array: ");
    scanf("%d", &num);    
    printf("Please Enter the Value of Elements: ");
    for(x = 0; x < num; x++)
        scanf("%d", &arr[x]);
    for(x = 0; x < num - 1; x++)
	{       
        for(y = 0; y < num - x - 1; y++)
		{          
            if(arr[y] > arr[y + 1])
			{               
                temp = arr[y];
                arr[y] = arr[y + 1];
                arr[y + 1] = temp;
            }
        }
    }
    printf("Array after implementing bubble sort: ");
    for(x = 0; x < num; x++){
        printf("%d  ", arr[x]);
    }
    return 0;
}
#include<stdio.h>    
#include<stdlib.h>  
int main(){  
int a[10][10],b[10][10],mul[10][10],r,c,i,j,k;    
system("cls");  
printf("enter the number of row=");    
scanf("%d",&r);    
printf("enter the number of column=");    
scanf("%d",&c);    
printf("enter the first matrix element=\n");    
for(i=0;i<r;i++)    
{    
for(j=0;j<c;j++)    
{    
scanf("%d",&a[i][j]);    
}    
}    
printf("enter the second matrix element=\n");    
for(i=0;i<r;i++)    
{    
for(j=0;j<c;j++)    
{    
scanf("%d",&b[i][j]);    
}    
}    
    
printf("multiply of the matrix=\n");    
for(i=0;i<r;i++)    
{    
for(j=0;j<c;j++)    
{    
mul[i][j]=0;    
for(k=0;k<c;k++)    
{    
mul[i][j]+=a[i][k]*b[k][j];    
}    
}    
}    
//for printing result    
for(i=0;i<r;i++) â€¦
#include <stdio.h>
int main()
{
	int n1,n2;
	printf("enter two positive integers:");
	scanf("%d%d",&n1,&n2);
	while(n1!=n2)
	{
		if(n1>n2)
		n1-=n2;
		else
		n2-=n1;
	}
	printf("gcd=%d",n1);
	return 0;
}
-----------------------------------------------------
Copystringfromanother
#include<stdio.h>
#include<conio.h>
#include<string.h>
int main()
{
	char str1[20],str2[20];
    printf("enter the string:");
    gets(str1);
    printf("\nstring 1= %s",str1);
    strcpy(str2,str1);
    printf("\nstring 2= %s",str2);
	getch();
	return 0;
}
-------------------------------------------------------
12 binarysearch
#include <stdio.h>
int main()
{
int i, low, high, mid, n, key, array[100];
printf("Enter number of elementsn");
scanf("%d",&n);
printf("Enter %d integersn", n);
for(i = 0; i < n; i++)
scanf("%d",&array[i]);
printf("Enter value to findn");
scanf("%d", &key);
low = 0;
high = n - 1;
mid = (low+high)/2;
while (low <= high) {
if(array[mid] < key)
low = mid + 1;
else if (array[mid] == key) {
printf("%d found at location %d.n", key, mid+1);
break;
}
else
high = mid - 1;
mid = (low + high)/2;
}
if(low > high)
printf("Not found! %d isn't present in the list.n", key);
return 0;
}
--------------------------------------------------------------
13 reversethestring
#include <stdio.h>  
#include <string.h>  
int main()  
{  
    char str[40];   
    printf (" \n Enter a string to be reversed: ");  
    scanf ("%s", str); 
    printf (" \n After the reverse of a string: %s ", strrev(str));  
    return 0;
}
------------------------------------------------------------------
14 lenghtofstring
#include <stdio.h>
#include <string.h>
int  main()
{
    char str[100];

    printf("Enter a string: ");
    scanf("%s", str);

    int len = strlen(str);

    printf("The length of the string is: %d\n", len);
}
-------------------------------------------------------------------
15 strassen matrix
#include<stdio.h>
int main(){
  int a[2][2], b[2][2], c[2][2], i, j;
  int m1, m2, m3, m4 , m5, m6, m7;
 
  printf("Enter the 4 elements of first matrix: ");
  for(i = 0;i < 2; i++)
      for(j = 0;j < 2; j++)
           scanf("%d", &a[i][j]);
 
  printf("Enter the 4 elements of second matrix: ");
  for(i = 0; i < 2; i++)
      for(j = 0;j < 2; j++)
           scanf("%d", &b[i][j]);
 
  printf("\nThe first matrix is\n");
  for(i = 0; i < 2; i++){
      printf("\n");
      for(j = 0; j < 2; j++)
           printf("%d\t", a[i][j]);
  }
 
  printf("\nThe second matrix is\n");
  for(i = 0;i < 2; i++){
      printf("\n");
      for(j = 0;j < 2; j++)
           printf("%d\t", b[i][j]);
  }
 
  m1= (a[0][0] + a[1][1]) * (b[0][0] + b[1][1]);
  m2= (a[1][0] + a[1][1]) * b[0][0];
  m3= a[0][0] * (b[0][1] - b[1][1]);
  m4= a[1][1] * (b[1][0] - b[0][0]);
  m5= (a[0][0] + a[0][1]) * b[1][1];
  m6= (a[1][0] - a[0][0]) * (b[0][0]+b[0][1]);
  m7= (a[0][1] - a[1][1]) * (b[1][0]+b[1][1]);
 
  c[0][0] = m1 + m4- m5 + m7;
  c[0][1] = m3 + m5;
  c[1][0] = m2 + m4;
  c[1][1] = m1 - m2 + m3 + m6;
 
   printf("\nAfter multiplication using Strassen's algorithm \n");
   for(i = 0; i < 2 ; i++){
      printf("\n");
      for(j = 0;j < 2; j++)
           printf("%d\t", c[i][j]);
   }
   return 0;
}
---------------------------------------------------------------
16 merge sort
#include <stdio.h>
void merge_Sort(int a[], int low, int mid, int high)
{
	int i, j, k, lo, temp[50];
   
	lo = low;
	i = low;
	j = mid + 1;
	while ((lo <= mid) && (j <= high))
	{
		if (a[lo] <= a[j])
		{
			temp[i] = a[lo];
			lo++;
		}
		else
		{
			temp[i] = a[j];
			j++;
		}
		i++;
	}
	
	if (lo > mid)
	{
		for (k = j; k <= high; k++)
		{
			temp[i] = a[k];
			i++;
		}
	}
	else
	{
		for (k = lo; k <= mid; k++)
		{
			temp[i] = a[k];
			i++;
		}
	}
  
	for (k = low; k <= high; k++)
		a[k] = temp[k];
}



void partition(int a[],int low,int high)
{
      int mid;
     
	  if(low < high)
      {
		mid = (low + high)/2;
		
		partition( a, low, mid);
		
		partition(a, mid+1, high);
		
		merge_Sort(a, low, mid, high);
	  }
}




int main()
{
      int a[50] ,  i, n;
      printf("Enter total number of elements:");
      scanf("%d", &n);
      printf("Enter the elements:\n");
      for(i = 0; i < n; i++)
          	scanf("%d", &a[i]);

      partition( a, 0, n - 1);
	   
      printf("After merge sort:\n");
      for(i = 0;i < n; i++)
	 		printf("%d\t", a[i]);
}
----------------------------------------------------------
17 divcon
#include<stdio.h>
#include<stdio.h>
int max, min;
int a[100];
void maxmin(int i, int j)
{
 int max1, min1, mid;
 if(i==j)
 {
  max = min = a[i];
 }
 else
 {
  if(i == j-1)
  {
   if(a[i] <a[j])
   {
    max = a[j];
    min = a[i];
   }
   else
   {
    max = a[i];
    min = a[j];
   }
  }
  else
  {
   mid = (i+j)/2;
   maxmin(i, mid);
   max1 = max; min1 = min;
   maxmin(mid+1, j);
   if(max <max1)
    max = max1;
   if(min > min1)
    min = min1;
  }
 }
}
int main ()
{
 int i, num;
 printf ("\nEnter the total number of numbers : ");
 scanf ("%d",&num);
 printf ("Enter the numbers : \n");
 for (i=1;i<=num;i++)
  scanf ("%d",&a[i]);

 max = a[0];
 min = a[0];
 maxmin(1, num);
 printf ("Minimum element in an array : %d\n", min);
 printf ("Maximum element in an array : %d\n", max);
 return 0;
}
--------------------------------------------------------------
18 allprimenum
#include<stdio.h>
int main()
{
	int n,i,count=0;
	printf("enter the number:");
	scanf("%d",&n);
	for(i=1;i<=n;i++)
	{
		if(n%i==0)
		{
			count++;
		}
	}
	if(count>2)
	{
		printf("prime number");
	}
	else
	{
		printf("not prime i.e composite");
	}
}
----------------------------------------------------------------
19 knapsack
#include <stdio.h>
#include <stdlib.h>

struct Item {
    int w;
    int v;
};

int compare(const void *a, const void *b) {
    struct Item *i1 = (struct Item *)a;
    struct Item *i2 = (struct Item *)b;
    double r1 = (double)i1->v / i1->w;
    double r2 = (double)i2->v / i2->w;
    return (r1 < r2) ? 1 : (r1 > r2) ? -1 : 0;
}

double knapsackGreedy(int cap, struct Item items[], int n) {
    qsort(items, n, sizeof(struct Item), compare);

    int cw = 0;
    double tv = 0.0;

    for (int i = 0; i < n; i++) {
        if (cw + items[i].w <= cap) {
            cw += items[i].w;
            tv += items[i].v;
        } else {
            int rw = cap - cw;
            tv += (double)rw * items[i].v / items[i].w;
            break;
        }
    }

    return tv;
}

int main() {
    int cap, n;
    printf("Enter capacity of knapsack: ");
    scanf("%d", &cap);
    printf("Enter number of items: ");
    scanf("%d", &n);

    struct Item items[n];
    for (int i = 0; i < n; i++) {
        printf("Enter weight and value of item %d: ", i + 1);
        scanf("%d %d", &items[i].w, &items[i].v);
    }

    double maxVal = knapsackGreedy(cap, items, n);

    printf("The maximum value that can be achieved in the knapsack is: %lf\n", maxVal);

    return 0;
}
--------------------------------------------------------------------------
MST
#include<stdio.h>
#include<conio.h>
 
int n, cost[10][10];
 
void prim() {
   int i, j, startVertex, endVertex;
   int k, nr[10], temp, minimumCost = 0, tree[10][3];
 
   /* For first smallest edge */
   temp = cost[0][0];
   for (i = 0; i < n; i++) {
      for (j = 0; j < n; j++) {
         if (temp > cost[i][j]) {
            temp = cost[i][j];
            startVertex = i;
            endVertex = j;
         }
      }
   }
   /* Now we have fist smallest edge in graph */
   tree[0][0] = startVertex;
   tree[0][1] = endVertex;
   tree[0][2] = temp;
   minimumCost = temp;
 
   /* Now we have to find min dis of each vertex from either
    startVertex or endVertex by initialising nr[] array
    */
 
   for (i = 0; i < n; i++) {
      if (cost[i][startVertex] < cost[i][endVertex])
         nr[i] = startVertex;
      else
         nr[i] = endVertex;
   }
 
   /* To indicate visited vertex initialise nr[] for them to 100 */
   nr[startVertex] = 100;
   nr[endVertex] = 100;
 
   /* Now find out remaining n-2 edges */
   temp = 99;
   for (i = 1; i < n - 1; i++) {
      for (j = 0; j < n; j++) {
         if (nr[j] != 100 && cost[j][nr[j]] < temp) {
            temp = cost[j][nr[j]];
            k = j;
         }
      }
      /* Now i have got next vertex */
      tree[i][0] = k;
      tree[i][1] = nr[k];
      tree[i][2] = cost[k][nr[k]];
      minimumCost = minimumCost + cost[k][nr[k]];
      nr[k] = 100;
 
      /* Now find if k is nearest to any vertex
       than its previous near value */
 
      for (j = 0; j < n; j++) {
         if (nr[j] != 100 && cost[j][nr[j]] > cost[j][k])
            nr[j] = k;
      }
      temp = 99;
   }
   /* Now i have the answer, just going to print it */
   printf("\nThe min spanning tree is:- ");
   for (i = 0; i < n - 1; i++) {
      for (j = 0; j < 3; j++)
         printf("%d", tree[i][j]);
      printf("\n");
   }
 
   printf("\nMin cost : %d", minimumCost);
}
 
int main() {
   int i, j;
 
   printf("\nEnter the no. of vertices :");
   scanf("%d", &n);
 
   printf("\nEnter the costs of edges in matrix form :");
   for (i = 0; i < n; i++)
      for (j = 0; j < n; j++) {
         scanf("%d", &cost[i][j]);
      }
 
   printf("\nThe matrix is :\n ");
   for (i = 0; i < n; i++) {
      for (j = 0; j < n; j++) {
         printf("%d\t", cost[i][j]);
      }
      printf("\n");
   }
   prim();
   getch();
   return 0;
}
--------------------------------------------------------------------------
optimal binaryst
#include <stdio.h>
#include <limits.h>

int sum(int freq[], int i, int j);

int optCost(int freq[], int i, int j)
{

   if (j < i)      
     return 0;
   if (j == i)     
     return freq[i];
 
   int fsum = sum(freq, i, j);
 

   int min = INT_MAX;
 
   for (int r = i; r <= j; ++r)
   {
       int cost = optCost(freq, i, r-1) +
                  optCost(freq, r+1, j);
       if (cost < min)
          min = cost;
   }

   return min + fsum;
}
int optimalSearchTree(int keys[], int freq[], int n)
{
     return optCost(freq, 0, n-1);
}
 
int sum(int freq[], int i, int j)
{
    int s = 0;
    for (int k = i; k <=j; k++)
       s += freq[k];
    return s;
}
 
int main()
{
    int keys[] = {10, 12, 20};
    int freq[] = {34, 8, 50};
    int n = sizeof(keys)/sizeof(keys[0]);
    printf("Cost of Optimal BST is %d ",
               optimalSearchTree(keys, freq, n));
    return 0;
}
-------------------------------------------------------------------------
binomialcoeff
#include <stdio.h>
unsigned long long binomialCoefficient(int n, int k) {
    unsigned long long dp[n + 1][k + 1];
    for (int i = 0; i <= n; i++)
        dp[i][0] = 1;

    for (int i = 1; i <= k; i++)
        dp[i][i] = 1;
        
    for (int i = 2; i <= n; i++) {
        for (int j = 1; j < i && j <= k; j++) {
            dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];
        }
    }

    return dp[n][k];
}

int main() {
    int n, k;
    printf("Enter the values of n and k (n choose k): ");
    scanf("%d %d", &n, &k);

    unsigned long long result = binomialCoefficient(n, k);
    printf("%d choose %d = %llu\n", n, k, result);

    return 0;
}
----------------------------------------------------------------------------
reversenum
#include <stdio.h>
int main() 
{
 int n, rev = 0, remainder,count=0;
 printf("Enter an integer: ");
 count++;
 scanf("%d", &n);
 count++;
 while (n != 0) 
 {
 	count++;
 remainder = n % 10;
 count++;
 rev = rev * 10 + remainder;
 count++;
 n /= 10;
 count++;
 }
 count++;
 printf("Reversed number = %d", rev);
 count++;
 printf("\ntime complexity is %d:",count);

}
------------------------------------------------------------------------------
perfectnum
#include<stdio.h>
main()
{
int i,number,sum=0;
printf("enter any number\n");
scanf("%d",&number);
for(i=1;i<number;i++)
{
	if (number %i==0)
	sum=sum+i;
}
if(sum==number)
printf("\n%d is a perfect number",number);
else
printf("\n%d is not a perfect number",number);
return 0;
}
--------------------------------------------------------------------------
traveling sales
#include <stdio.h>

#define MAX_CITIES 10

int n;
int g[MAX_CITIES][MAX_CITIES];
int dp[MAX_CITIES][1 << MAX_CITIES];

int tsp(int c, int v) {
    if (v == (1 << n) - 1) {
        return g[c][0];
    }

    if (dp[c][v] != -1) {
        return dp[c][v];
    }

    int md = 1e9;
    for (int nc = 0; nc < n; nc++) {
        if (!(v & (1 << nc))) {
            int d = g[c][nc] + tsp(nc, v | (1 << nc));
            if (d < md) {
                md = d;
            }
        }
    }

    dp[c][v] = md;
    return md;
}

int main() {
    printf("Enter the number of cities (maximum %d): ", MAX_CITIES);
    scanf("%d", &n);

    printf("Enter the distances between cities (use -1 for unreachable cities):\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &g[i][j]);
        }
    }

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < (1 << n); j++) {
            dp[i][j] = -1;
        }
    }

    int sd = tsp(0, 1);
    printf("Shortest distance for the TSP: %d\n", sd);

    return 0;
}
--------------------------------------------------------------------------
pattern
#include<stdio.h>
int main()
{
int i,j,rows;
printf("enter the number of rows:");
scanf("%d",&rows);
for (i=1; i<=rows; ++i)
{
	for(j=1; j<=rows; ++j)
	{
		printf("*");
return 0;
}
----------------------------------------------------------------------------
floyd
#include <stdio.h>

#define INF 99999
#define MAX_VERTICES 100

// Function to find the minimum of two numbers
int min(int a, int b) {
    return (a < b) ? a : b;
}

// Function to perform the Floyd-Warshall algorithm
void floydWarshall(int graph[MAX_VERTICES][MAX_VERTICES], int V) {
    int dist[MAX_VERTICES][MAX_VERTICES];
    int i, j, k;

    // Initialize the distance matrix with the given graph
    for (i = 0; i < V; i++) {
        for (j = 0; j < V; j++) {
            dist[i][j] = graph[i][j];
        }
    }

    // Calculate the shortest paths between all pairs of vertices
    for (k = 0; k < V; k++) {
        for (i = 0; i < V; i++) {
            for (j = 0; j < V; j++) {
                if (dist[i][k] != INF && dist[k][j] != INF) {
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
                }
            }
        }
    }

    // Print the shortest paths
    printf("Shortest paths between all pairs of vertices:\n");
    for (i = 0; i < V; i++) {
        for (j = 0; j < V; j++) {
            if (dist[i][j] == INF) {
                printf("INF\t");
            } else {
                printf("%d\t", dist[i][j]);
            }
        }
        printf("\n");
    }
}

int main() {
    int V;
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &V);

    int graph[MAX_VERTICES][MAX_VERTICES];

    printf("Enter the adjacency matrix (use 'INF' for unreachable vertices):\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            scanf("%d", &graph[i][j]);
            if (graph[i][j] == -1) { // Assume -1 as 'INF' for user input
                graph[i][j] = INF;
            }
        }
    }

    floydWarshall(graph, V);

    return 0;
}
-----------------------------------------------------------------------------
pascal tri
#include <stdio.h>
int  main()
{
    int no_row,c=1,blk,i,j;
    printf("Input number of rows: ");
    scanf("%d",&no_row);
    for(i=0;i<no_row;i++)
    {
        for(blk=1;blk<=no_row-i;blk++)
        printf("  ");
        for(j=0;j<=i;j++)
        {
            if (j==0||i==0)
                c=1;
            else
               c=c*(i-j+1)/j;
            printf("% 4d",c);
        }
        printf("\n");
    }
}
----------------------------------------------------------------------------
optimalcost
#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 100

int graph[MAX_VERTICES][MAX_VERTICES];
bool visited[MAX_VERTICES];
int numVertices;

int prim() {
    int selectedCount = 1;
    int selectedVertices[MAX_VERTICES] = {0}; 
    int totalCost = 0;

    visited[0] = true;

    while (selectedCount < numVertices) {
        int minCost = 9999; 
        int u = -1;
        int v = -1;

        for (int i = 0; i < numVertices; i++) {
            if (visited[i]) {
                for (int j = 0; j < numVertices; j++) {
                    if (!visited[j] && graph[i][j] != -1 && graph[i][j] < minCost) {
                        minCost = graph[i][j];
                        u = i;
                        v = j;
                    }
                }
            }
        }

        if (u != -1 && v != -1) {
            visited[v] = true;
            selectedVertices[selectedCount++] = v;
            totalCost += minCost;
        }
    }

    printf("Selected vertices in the MST: ");
    for (int i = 0; i < numVertices; i++) {
        printf("%d ", selectedVertices[i]);
    }
    printf("\n");

    return totalCost;
}

int main() {
    printf("Enter the number of vertices (maximum %d): ", MAX_VERTICES);
    scanf("%d", &numVertices);

    printf("Enter the adjacency matrix for the graph (-1 for no edge):\n");
    for (int i = 0; i < numVertices; i++) {
        for (int j = 0; j < numVertices; j++) {
            scanf("%d", &graph[i][j]);
        }
        visited[i] = false;
    }

    int optimalCost = prim();
    printf("Optimal cost using Prim's algorithm: %d\n", optimalCost);

    return 0;
}
-----------------------------------------------------------------------
sum of dig
#include <stdio.h>

int sumOfDigits(int number) {
    int sum = 0;

    while (number != 0) {
        int digit = number % 10;
        sum += digit;
        number /= 10;
    }

    return sum;
}

int main() {
    int num;

    printf("Enter an integer number: ");
    scanf("%d", &num);

    int result = sumOfDigits(num);
    printf("Sum of digits: %d\n", result);

    return 0;
}
------------------------------------------------------------------------------
min max
#include <stdio.h>

void printMinMaxSequences(int arr[], int size) {
    if (size == 0) {
        printf("The array is empty.\n");
        return;
    }

    int min_sequence = arr[0];
    int max_sequence = arr[0];

    printf("Minimum value sequence: %d", min_sequence);
    printf("\nMaximum value sequence: %d", max_sequence);

    for (int i = 1; i < size; i++) {
        min_sequence = (arr[i] < (min_sequence + arr[i])) ? arr[i] : (min_sequence + arr[i]);
        max_sequence = (arr[i] > (max_sequence + arr[i])) ? arr[i] : (max_sequence + arr[i]);

        printf(", %d", min_sequence);
        printf("\n, %d", max_sequence);
    }
    printf("\n");
}

int main() {
    int size;
    printf("Enter the size of the array: ");
    scanf("%d", &size);

    int arr[size];
    printf("Enter the elements of the array: ");
    for (int i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }

    printMinMaxSequences(arr, size);

    return 0;
}
---------------------------------------------------------------------------
n queen
#include <stdio.h>
#include <stdbool.h>

#define MAX_N 20

int board[MAX_N][MAX_N];
int N;

void printSolution() {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%c ", board[i][j] ? 'Q' : '-');
        }
        printf("\n");
    }
    printf("\n");
}

bool isSafe(int row, int col) {
    int i, j;

    for (i = 0; i < col; i++) {
        if (board[row][i]) {
            return false;
        }
    }

    for (i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j]) {
            return false;
        }
    }

    for (i = row, j = col; j >= 0 && i < N; i++, j--) {
        if (board[i][j]) {
            return false;
        }
    }

    return true;
}

bool solveNQueensUtil(int col) {
    if (col == N) {
        printSolution();
        return true;
    }

    for (int i = 0; i < N; i++) {
        if (isSafe(i, col)) {
            board[i][col] = 1;
            if (solveNQueensUtil(col + 1)) {
                return true;
            }
            board[i][col] = 0; 
        }
    }

    return false;
}

void solveNQueens() {
    printf("Enter the board size (N): ");
    scanf("%d", &N);

    if (N <= 0 || N > MAX_N) {
        printf("Invalid board size. Please enter a positive value less than or equal to %d.\n", MAX_N);
        return;
    }

    if (!solveNQueensUtil(0)) {
        printf("Solution does not exist for N = %d.\n", N);
    }
}

int main() {
    solveNQueens();
    return 0;
}
---------------------------------------------------------------------------
insert num
#include <stdio.h>

#define MAX_SIZE 100

int main() {
    int list[MAX_SIZE];
    int size, position, number;

    printf("Enter the size of the list (maximum %d): ", MAX_SIZE);
    scanf("%d", &size);

    if (size <= 0 || size > MAX_SIZE) {
        printf("Invalid list size. Exiting the program.\n");
        return 1;
    }

    printf("Enter the elements of the list:\n");
    for (int i = 0; i < size; i++) {
        scanf("%d", &list[i]);
    }

    printf("Enter the position to insert the number (0-based index): ");
    scanf("%d", &position);

    if (position < 0 || position > size) {
        printf("Invalid position. Exiting the program.\n");
        return 1;
    }

    printf("Enter the number to insert: ");
    scanf("%d", &number);

    
    for (int i = size; i > position; i--) {
        list[i] = list[i - 1];
    }

    list[position] = number;
    size++; 

    printf("The list after insertion: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", list[i]);
    }
    printf("\n");

    return 0;
}
-----------------------------------------------------------------------------
subsets bt
#include <stdio.h>
#include <stdbool.h>

#define MAX_SIZE 20

int n; 
int set[MAX_SIZE]; 


bool subsetSum(int pos, int sum, int target) {
    if (sum == target) {
        return true;
    }

    for (int i = pos; i < n; i++) {
        if (sum + set[i] <= target) {
            if (subsetSum(i + 1, sum + set[i], target)) {
                return true;
            }
        }
    }

    return false;
}

int main() {
    int targetSum;

    printf("Enter the number of elements in the set (maximum %d): ", MAX_SIZE);
    scanf("%d", &n);

    printf("Enter the elements of the set:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &set[i]);
    }

    printf("Enter the target sum: ");
    scanf("%d", &targetSum);

    if (subsetSum(0, 0, targetSum)) {
        printf("Subset with the given target sum exists.\n");
    } else {
        printf("No subset with the given target sum exists.\n");
    }

    return 0;
}
-------------------------------------------------------------------------------
graph colour
#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 10

int n; 
int graph[MAX_VERTICES][MAX_VERTICES]; 
int colors[MAX_VERTICES]; 


bool isSafe(int v, int color, int colors[]) {
    for (int i = 0; i < n; i++) {
        if (graph[v][i] && color == colors[i]) {
            return false;
        }
    }
    return true;
}


bool graphColoringUtil(int m, int colors[]) {
    int v;
    for (v = 0; v < n; v++) {
        if (colors[v] == 0) {
            for (int c = 1; c <= m; c++) {
                if (isSafe(v, c, colors)) {
                    colors[v] = c;
                    if (graphColoringUtil(m, colors)) {
                        return true;
                    }
                    colors[v] = 0; 
                }
            }
            return false;
        }
    }
    return true;
}


void printColors(int colors[]) {
    printf("Colors assigned to vertices:\n");
    for (int i = 0; i < n; i++) {
        printf("Vertex %d -> Color %d\n", i + 1, colors[i]);
    }
}

int main() {
    int m; 
    printf("Enter the number of vertices (maximum %d): ", MAX_VERTICES);
    scanf("%d", &n);

    printf("Enter the adjacency matrix (1 if the vertices are adjacent, 0 otherwise):\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    printf("Enter the number of colors: ");
    scanf("%d", &m);

    for (int i = 0; i < n; i++) {
        colors[i] = 0; 
    }

    if (graphColoringUtil(m, colors)) {
        printColors(colors);
    } else {
        printf("Graph cannot be colored with %d colors.\n", m);
    }

    return 0;
}
-----------------------------------------------------------------------------
loader
#include <stdio.h>
#include <stdbool.h>

#define MAX_CONTAINERS 100

typedef struct {
    int id;
    int weight;
} Container;


void swap(Container *a, Container *b) {
    Container temp = *a;
    *a = *b;
    *b = temp;
}


void sortContainers(Container containers[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (containers[j].weight < containers[j + 1].weight) {
                swap(&containers[j], &containers[j + 1]);
            }
        }
    }
}


int containerLoader(Container containers[], int n, int maxLoad) {
    sortContainers(containers, n);

    int totalWeight = 0;
    int loadedWeight = 0;
    int loadedContainers = 0;

    for (int i = 0; i < n; i++) {
        if (loadedWeight + containers[i].weight <= maxLoad) {
            loadedWeight += containers[i].weight;
            totalWeight += containers[i].weight;
            loadedContainers++;
        }
    }

    printf("Maximum loaded weight: %d\n", totalWeight);
    printf("Number of containers loaded: %d\n", loadedContainers);
    printf("Container IDs loaded: ");
    for (int i = 0; i < loadedContainers; i++) {
        printf("%d ", containers[i].id);
    }
    printf("\n");

    return totalWeight;
}

int main() {
    int n;
    int maxLoad;

    printf("Enter the number of containers (maximum %d): ", MAX_CONTAINERS);
    scanf("%d", &n);

    if (n <= 0 || n > MAX_CONTAINERS) {
        printf("Invalid number of containers. Exiting the program.\n");
        return 1;
    }

    Container containers[MAX_CONTAINERS];
    printf("Enter the weight of each container:\n");
    for (int i = 0; i < n; i++) {
        containers[i].id = i + 1;
        scanf("%d", &containers[i].weight);
    }

    printf("Enter the maximum load of the container: ");
    scanf("%d", &maxLoad);

    containerLoader(containers, n, maxLoad);

    return 0;
}
----------------------------------------------------------------------------
factors of n
#include <stdio.h>

void printFactors(int n) {
    printf("Factors of %d are: ", n);
    for (int i = 1; i <= n; i++) {
        if (n % i == 0) {
            printf("%d ", i);
        }
    }
    printf("\n");
}

int main() {
    int n;

    printf("Enter the value of n: ");
    scanf("%d", &n);

    printFactors(n);

    return 0;
}
------------------------------------------------------------------------------
branchbound
#include <stdio.h>
#include <stdbool.h>

#define MAX_N 10

int n; 
int costMatrix[MAX_N][MAX_N]; 


typedef struct {
    int agent;
    int task;
} Assignment;


Assignment initialAssignment() {
    Assignment assign;
    assign.agent = -1;
    assign.task = -1;
    return assign;
}


bool isTaskAssigned(int task, Assignment assignment[]) {
    for (int i = 0; i < n; i++) {
        if (assignment[i].task == task) {
            return true;
        }
    }
    return false;
}


int calculateLowerBound(int agent, int task, Assignment assignment[]) {
    int bound = 0;
    
    for (int i = 0; i < n; i++) {
        if (assignment[i].agent == agent) {
            bound += costMatrix[assignment[i].agent][assignment[i].task];
        }
    }
    
    for (int i = 0; i < n; i++) {
        if (!isTaskAssigned(i, assignment) && costMatrix[agent][i] < bound) {
            bound += costMatrix[agent][i];
        }
    }
    return bound;
}


void branchAndBound(Assignment assignment[], int currentCost, int* minCost, Assignment* optimalAssignment) {
    int agent = -1;
    for (int i = 0; i < n; i++) {
        if (!isTaskAssigned(i, assignment)) {
            agent = i;
            break;
        }
    }

    if (agent == -1) {
        
        if (currentCost < *minCost) {
            *minCost = currentCost;
            for (int i = 0; i < n; i++) {
                optimalAssignment[i] = assignment[i];
            }
        }
        return;
    }

    
    for (int task = 0; task < n; task++) {
        if (!isTaskAssigned(task, assignment)) {
            int lowerBound = currentCost + costMatrix[agent][task] + calculateLowerBound(agent, task, assignment);
            if (lowerBound < *minCost) {
                assignment[agent].agent = agent;
                assignment[agent].task = task;
                branchAndBound(assignment, lowerBound, minCost, optimalAssignment);
                assignment[agent].agent = -1; 
                assignment[agent].task = -1;
            }
        }
    }
}

int main() {
    printf("Enter the number of agents and tasks (maximum %d): ", MAX_N);
    scanf("%d", &n);

    printf("Enter the cost matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &costMatrix[i][j]);
        }
    }

    Assignment assignment[MAX_N];
    for (int i = 0; i < n; i++) {
        assignment[i] = initialAssignment();
    }

    int minCost = 999999; 
    Assignment optimalAssignment[MAX_N];

    branchAndBound(assignment, 0, &minCost, optimalAssignment);

    printf("Optimal Assignment:\n");
    for (int i = 0; i < n; i++) {
        printf("Agent %d -> Task %d\n", optimalAssignment[i].agent + 1, optimalAssignment[i].task + 1);
    }

    printf("Minimum Cost: %d\n", minCost);

    return 0;
}
------------------------------------------------------------------------------
linear search
#include<stdio.h>
int main()
{
	int key,a[100],i,n,flag=0;
	printf("enter the no.of elements:");
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		scanf("%d",&a[i]);
	}
	printf("enter the element to search:");
	scanf("%d",&key);
	for(i=0;i<n;i++)
	{
		if(a[i]==key)
		{
			flag=1;
			break;
		}
	}
	if(flag==1)
	{
			printf("%d is at %d position",key,i);
	}
		else
		printf("key is not found in position");
}
-----------------------------------------------------------------------------
halmatonion
#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 10

int n; 
int graph[MAX_VERTICES][MAX_VERTICES]; 

bool isSafe(int v, int path[], int pos) {
    if (graph[path[pos - 1]][v] == 0)
        return false;

   
    for (int i = 0; i < pos; i++) {
        if (path[i] == v)
            return false;
    }

    return true;
}

bool hamiltonianCircuitUtil(int path[], int pos) {
    if (pos == n) {
        
        if (graph[path[pos - 1]][path[0]] == 1) {
            return true;
        }
        return false;
    }

    for (int v = 1; v < n; v++) { 
        if (isSafe(v, path, pos)) {
            path[pos] = v;

            if (hamiltonianCircuitUtil(path, pos + 1))
                return true;

            path[pos] = -1; 
        }
    }

    return false;
}

void printHamiltonianCircuit(int path[]) {
    printf("Hamiltonian Circuit: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", path[i]);
    }
    printf("%d\n", path[0]); 
}

int main() {
    printf("Enter the number of vertices (maximum %d): ", MAX_VERTICES);
    scanf("%d", &n);

    printf("Enter the adjacency matrix (1 if the vertices are adjacent, 0 otherwise):\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    int path[MAX_VERTICES];
    for (int i = 0; i < n; i++) {
        path[i] = -1; 
    }

    path[0] = 0; 
    if (hamiltonianCircuitUtil(path, 1)) {
        printHamiltonianCircuit(path);
    } else {
        printf("No Hamiltonian Circuit exists for the given graph.\n");
    }

    return 0;
}
---------------------------------------------------------------------------------------------------------


